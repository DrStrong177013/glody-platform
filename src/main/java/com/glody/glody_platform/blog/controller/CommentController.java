package com.glody.glody_platform.blog.controller;

import com.glody.glody_platform.blog.dto.CommentRequestDto;
import com.glody.glody_platform.blog.dto.CommentResponseDto;
import com.glody.glody_platform.blog.service.CommentService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
 * REST Controller x·ª≠ l√Ω c√°c ch·ª©c nƒÉng li√™n quan ƒë·∫øn b√¨nh lu·∫≠n b√†i vi·∫øt.
 */
@RestController
@RequestMapping("/api/comments")
@RequiredArgsConstructor
@Tag(name = "Comment Controller", description = "Qu·∫£n l√Ω b√¨nh lu·∫≠n cho b√†i vi·∫øt")
public class CommentController {

    private final CommentService commentService;

    /**
     * Th√™m b√¨nh lu·∫≠n v√†o b√†i vi·∫øt.
     * N·∫øu mu·ªën tr·∫£ l·ªùi 1 b√¨nh lu·∫≠n kh√°c th√¨ truy·ªÅn parentId trong DTO.
     *
     * @param dto D·ªØ li·ªáu b√¨nh lu·∫≠n
     * @return Ph·∫£n h·ªìi th√†nh c√¥ng
     */
    @Operation(summary = "Th√™m b√¨nh lu·∫≠n v√†o b√†i vi·∫øt (truy·ªÅn parentId n·∫øu l√† tr·∫£ l·ªùi m·ªôt b√¨nh lu·∫≠n)")
    @PostMapping
    public ResponseEntity<String> addComment(@RequestBody CommentRequestDto dto) {
        commentService.addComment(dto);
        return ResponseEntity.ok("‚úÖ B√¨nh lu·∫≠n ƒë√£ ƒë∆∞·ª£c th√™m!");
    }

    /**
     * L·∫•y danh s√°ch b√¨nh lu·∫≠n c·ªßa m·ªôt b√†i vi·∫øt theo ID.
     *
     * @param postId ID b√†i vi·∫øt
     * @param page   S·ªë trang (m·∫∑c ƒë·ªãnh 0)
     * @param size   K√≠ch th∆∞·ªõc trang (m·∫∑c ƒë·ªãnh 10)
     * @return Danh s√°ch b√¨nh lu·∫≠n d·∫°ng ph√¢n trang
     */
    @Operation(summary = "L·∫•y danh s√°ch b√¨nh lu·∫≠n theo b√†i vi·∫øt")
    @GetMapping("/post/{postId}")
    public ResponseEntity<Page<CommentResponseDto>> getByPost(
            @PathVariable Long postId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {

        Page<CommentResponseDto> comments = commentService.getCommentsByPost(postId, PageRequest.of(page, size));
        return ResponseEntity.ok(comments);
    }

    /**
     * Xo√° m·ªÅm m·ªôt b√¨nh lu·∫≠n (ƒë√°nh d·∫•u ƒë√£ xo√° thay v√¨ xo√° h·∫≥n).
     *
     * @param commentId ID b√¨nh lu·∫≠n
     * @return Ph·∫£n h·ªìi xo√° th√†nh c√¥ng
     */
    @Operation(summary = "Xo√° m·ªÅm b√¨nh lu·∫≠n (kh√¥ng xo√° kh·ªèi DB)")
    @DeleteMapping("/{commentId}")
    public ResponseEntity<String> deleteComment(@PathVariable Long commentId) {
        commentService.softDelete(commentId);
        return ResponseEntity.ok("üóëÔ∏è ƒê√£ xo√° b√¨nh lu·∫≠n.");
    }
}
