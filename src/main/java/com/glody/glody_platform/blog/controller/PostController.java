package com.glody.glody_platform.blog.controller;

import com.glody.glody_platform.blog.dto.PostRequestDto;
import com.glody.glody_platform.blog.dto.PostResponseDto;
import com.glody.glody_platform.blog.service.PostService;
import com.glody.glody_platform.common.PageResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * REST Controller cho qu·∫£n l√Ω b√†i vi·∫øt (bao g·ªìm CRUD, ph√¢n trang, t√¨m ki·∫øm, v√† kh√¥i ph·ª•c).
 */
@RestController
@RequestMapping("/api/posts")
@RequiredArgsConstructor
@Tag(name = "Post Controller", description = "Qu·∫£n l√Ω b√†i vi·∫øt blog")
public class PostController {

    private final PostService postService;

    /**
     * L·∫•y danh s√°ch b√†i vi·∫øt v·ªõi ph√¢n trang, t√¨m ki·∫øm, l·ªçc theo nhi·ªÅu ti√™u ch√≠.
     */
    @Operation(summary = "L·∫•y danh s√°ch b√†i vi·∫øt (ph√¢n trang, l·ªçc, t√¨m ki·∫øm)")
    @GetMapping
    public ResponseEntity<PageResponse<PostResponseDto>> getPosts(
            @RequestParam(required = false) String keyword,
            @RequestParam(required = false) Boolean published,
            @RequestParam(required = false) Long categoryId,
            @RequestParam(required = false) Long countryId,
            @RequestParam(required = false) List<Long> tagIds,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "createdAt") String sortBy,
            @RequestParam(defaultValue = "desc") String direction
    ) {
        Sort sort = direction.equalsIgnoreCase("desc")
                ? Sort.by(sortBy).descending()
                : Sort.by(sortBy).ascending();

        Pageable pageable = PageRequest.of(page, size, sort);
        Page<PostResponseDto> postPage = postService.getAllPosts(keyword, published, categoryId, countryId, tagIds, pageable);

        PageResponse.PageInfo pageInfo = new PageResponse.PageInfo(
                postPage.getNumber(),
                postPage.getSize(),
                postPage.getTotalPages(),
                postPage.getTotalElements(),
                postPage.hasNext(),
                postPage.hasPrevious()
        );

        return ResponseEntity.ok(new PageResponse<>(postPage.getContent(), pageInfo));
    }

    /**
     * Admin t·∫°o m·ªõi b√†i vi·∫øt.
     */
    @Operation(summary = "T·∫°o b√†i vi·∫øt m·ªõi (Admin)")
    @PostMapping("/admin")
    public ResponseEntity<PostResponseDto> createPost(@RequestBody PostRequestDto dto) {
        return ResponseEntity.ok(postService.createOrUpdatePost(null, dto));
    }

    /**
     * Admin c·∫≠p nh·∫≠t b√†i vi·∫øt theo ID.
     */
    @Operation(summary = "Admin c·∫≠p nh·∫≠t b√†i vi·∫øt (Admin)")
    @PutMapping("/admin/{id}")
    public ResponseEntity<PostResponseDto> updatePost(@PathVariable Long id, @RequestBody PostRequestDto dto) {
        return ResponseEntity.ok(postService.createOrUpdatePost(id, dto));
    }

    /**
     * Admin xo√° m·ªÅm b√†i vi·∫øt (kh√¥ng xo√° kh·ªèi DB).
     */
    @Operation(summary = "Xo√° m·ªÅm b√†i vi·∫øt (Admin)")
    @DeleteMapping("/admin/{id}")
    public ResponseEntity<String> softDelete(@PathVariable Long id) {
        postService.softDelete(id);
        return ResponseEntity.ok("üóëÔ∏è B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c xo√° m·ªÅm");
    }

    /**
     * Kh√¥i ph·ª•c b√†i vi·∫øt ƒë√£ b·ªã xo√° m·ªÅm.
     */
    @Operation(summary = "Kh√¥i ph·ª•c b√†i vi·∫øt ƒë√£ xo√° (Admin)")
    @PutMapping("/admin/{id}/restore")
    public ResponseEntity<String> restore(@PathVariable Long id) {
        postService.restore(id);
        return ResponseEntity.ok("‚ôªÔ∏è B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c");
    }

    /**
     * L·∫•y danh s√°ch c√°c b√†i vi·∫øt ƒë√£ b·ªã xo√° m·ªÅm.
     */
    @Operation(summary = "L·∫•y danh s√°ch b√†i vi·∫øt ƒë√£ b·ªã xo√° m·ªÅm (Admin)")
    @GetMapping("/admin/deleted")
    public ResponseEntity<PageResponse<PostResponseDto>> getDeletedPosts(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "deletedAt") String sortBy,
            @RequestParam(defaultValue = "desc") String direction
    ) {
        Sort sort = direction.equalsIgnoreCase("desc")
                ? Sort.by(sortBy).descending()
                : Sort.by(sortBy).ascending();

        Pageable pageable = PageRequest.of(page, size, sort);
        Page<PostResponseDto> postPage = postService.getDeletedPosts(pageable);

        PageResponse.PageInfo pageInfo = new PageResponse.PageInfo(
                postPage.getNumber(),
                postPage.getSize(),
                postPage.getTotalPages(),
                postPage.getTotalElements(),
                postPage.hasNext(),
                postPage.hasPrevious()
        );

        return ResponseEntity.ok(new PageResponse<>(postPage.getContent(), pageInfo));
    }

    /**
     * TƒÉng l∆∞·ª£t xem cho b√†i vi·∫øt theo slug.
     */
    @Operation(summary = "TƒÉng l∆∞·ª£t xem cho b√†i vi·∫øt qua slug")
    @PatchMapping("/slug/{slug}/view")
    public ResponseEntity<String> increaseView(@PathVariable String slug) {
        postService.increaseViewCount(slug);
        return ResponseEntity.ok("üëÅÔ∏è ƒê√£ tƒÉng l∆∞·ª£t xem cho b√†i vi·∫øt");
    }
}
