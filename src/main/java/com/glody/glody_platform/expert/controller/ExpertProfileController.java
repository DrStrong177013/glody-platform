package com.glody.glody_platform.expert.controller;

import com.glody.glody_platform.expert.dto.ExpertProfileDto;
import com.glody.glody_platform.expert.dto.ExpertProfileUpdateDto;
import com.glody.glody_platform.expert.service.ExpertProfileService;
import com.glody.glody_platform.users.entity.User;
import com.glody.glody_platform.users.repository.UserRepository;
import io.swagger.v3.oas.annotations.Hidden;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

/**
 * REST Controller x·ª≠ l√Ω thao t√°c v·ªõi h·ªì s∆° chuy√™n gia (expert profile).
 */
@Hidden
@RestController
@RequestMapping("/api/expert-profiles")
@RequiredArgsConstructor
@Tag(name = "Expert Profile Controller", description = "Xem v√† c·∫≠p nh·∫≠t h·ªì s∆° chuy√™n gia")
public class ExpertProfileController {

    private final ExpertProfileService expertProfileService;
    private final UserRepository userRepository;

    private Long getUserIdFromAuth(Authentication authentication) {
        String email = authentication.getName();
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));
        return user.getId();
    }

    @Operation(summary = "L·∫•y th√¥ng tin h·ªì s∆° chuy√™n gia c·ªßa ch√≠nh m√¨nh (Expert)")
    @GetMapping("/me")
    public ResponseEntity<ExpertProfileDto> getExpertProfile(Authentication authentication) {
        Long userId = getUserIdFromAuth(authentication);
        ExpertProfileDto dto = expertProfileService.getExpertProfileByUserId(userId);
        return ResponseEntity.ok(dto);
    }

    @Operation(summary = "C·∫≠p nh·∫≠t th√¥ng tin h·ªì s∆° chuy√™n gia c·ªßa ch√≠nh m√¨nh (Expert)")
    @PutMapping("/me")
    public ResponseEntity<String> updateExpertProfile(
            Authentication authentication,
            @RequestBody ExpertProfileUpdateDto dto) {

        Long userId = getUserIdFromAuth(authentication);
        expertProfileService.updateExpertProfile(userId, dto);
        return ResponseEntity.ok("üìù H·ªì s∆° chuy√™n gia ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.");
    }
}
