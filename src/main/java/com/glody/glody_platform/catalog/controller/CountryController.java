package com.glody.glody_platform.catalog.controller;

import com.glody.glody_platform.catalog.dto.CountryRequestDto;
import com.glody.glody_platform.catalog.dto.CountryResponseDto;
import com.glody.glody_platform.catalog.entity.Country;
import com.glody.glody_platform.catalog.service.CountryService;
import com.glody.glody_platform.common.PageResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * REST Controller qu·∫£n l√Ω danh s√°ch qu·ªëc gia (Country).
 */
@RestController
@RequestMapping("/api/countries")
@RequiredArgsConstructor
@Tag(name = "Country Controller", description = "Qu·∫£n l√Ω danh s√°ch qu·ªëc gia")
public class CountryController {

    private final CountryService countryService;

    /**
     * T√¨m ki·∫øm qu·ªëc gia theo t·ª´ kh√≥a v√† ph√¢n trang.
     *
     * @param keyword   T·ª´ kh√≥a t√¨m ki·∫øm (t√™n qu·ªëc gia)
     * @param size      K√≠ch th∆∞·ªõc trang
     * @param page      Trang hi·ªán t·∫°i
     * @param sortBy    Tr∆∞·ªùng s·∫Øp x·∫øp
     * @param direction H∆∞·ªõng s·∫Øp x·∫øp (asc/desc)
     * @return Danh s√°ch qu·ªëc gia ph√π h·ª£p
     */
    @Operation(
            summary = "T√¨m ki·∫øm qu·ªëc gia",
            description = "T√¨m ki·∫øm qu·ªëc gia theo t·ª´ kh√≥a v√† h·ªó tr·ª£ ph√¢n trang, s·∫Øp x·∫øp."
    )
    @GetMapping
    public ResponseEntity<PageResponse<CountryResponseDto>> search(
            @RequestParam(required = false, defaultValue = "") String keyword,
            @RequestParam(required = false) Integer size,
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false, defaultValue = "id") String sortBy,
            @RequestParam(required = false, defaultValue = "asc") String direction
    ) {
        Sort sort = direction.equalsIgnoreCase("desc")
                ? Sort.by(sortBy).descending()
                : Sort.by(sortBy).ascending();

        if (size != null) {
            int pageNumber = (page != null) ? page : 0;
            Pageable pageable = PageRequest.of(pageNumber, size, sort);
            Page<CountryResponseDto> paged = countryService.searchPagedDto(keyword, pageable);

            PageResponse.PageInfo pageInfo = new PageResponse.PageInfo(
                    paged.getNumber(),
                    paged.getSize(),
                    paged.getTotalPages(),
                    paged.getTotalElements(),
                    paged.hasNext(),
                    paged.hasPrevious()
            );
            return ResponseEntity.ok(new PageResponse<>(paged.getContent(), pageInfo));
        }

        List<CountryResponseDto> list = countryService.searchAllDto(keyword, sort);
        PageResponse.PageInfo pageInfo = new PageResponse.PageInfo(
                0,
                list.size(),
                1,
                list.size(),
                false,
                false
        );
        return ResponseEntity.ok(new PageResponse<>(list, pageInfo));
    }

    /**
     * L·∫•y th√¥ng tin chi ti·∫øt c·ªßa qu·ªëc gia theo ID.
     *
     * @param id ID qu·ªëc gia
     * @return Th√¥ng tin qu·ªëc gia
     */
    @Operation(
            summary = "L·∫•y th√¥ng tin qu·ªëc gia theo ID",
            description = "Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa m·ªôt qu·ªëc gia d·ª±a tr√™n ID."
    )
    @GetMapping("/{id}")
    public ResponseEntity<CountryResponseDto> getById(@PathVariable Long id) {
        return ResponseEntity.ok(countryService.getById(id));
    }

    /**
     * T·∫°o m·ªõi m·ªôt qu·ªëc gia.
     *
     * @param dto D·ªØ li·ªáu qu·ªëc gia
     * @return Th·ª±c th·ªÉ qu·ªëc gia sau khi t·∫°o
     */
    @Operation(
            summary = "T·∫°o qu·ªëc gia m·ªõi (Admin)",
            description = "Cho ph√©p t·∫°o m·ªõi m·ªôt qu·ªëc gia trong h·ªá th·ªëng."
    )
    @PostMapping
    public ResponseEntity<Country> create(@RequestBody CountryRequestDto dto) {
        Country created = countryService.create(dto);
        return ResponseEntity.ok(created);
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin m·ªôt qu·ªëc gia.
     *
     * @param id  ID qu·ªëc gia
     * @param dto D·ªØ li·ªáu m·ªõi
     * @return Qu·ªëc gia sau khi c·∫≠p nh·∫≠t
     */
    @Operation(
            summary = "C·∫≠p nh·∫≠t qu·ªëc gia (Admin)",
            description = "C·∫≠p nh·∫≠t th√¥ng tin cho qu·ªëc gia d·ª±a tr√™n ID."
    )
    @PutMapping("/{id}")
    public ResponseEntity<Country> update(@PathVariable Long id, @RequestBody CountryRequestDto dto) {
        Country updated = countryService.update(id, dto);
        return ResponseEntity.ok(updated);
    }

    /**
     * Xo√° m·ªÅm m·ªôt qu·ªëc gia.
     *
     * @param id ID qu·ªëc gia
     * @return Th√¥ng b√°o xo√° th√†nh c√¥ng
     */
    @Operation(
            summary = "Xo√° m·ªÅm qu·ªëc gia (Admin)",
            description = "Th·ª±c hi·ªán xo√° m·ªÅm qu·ªëc gia kh·ªèi h·ªá th·ªëng (v·∫´n gi·ªØ l·∫°i trong database)."
    )
    @DeleteMapping("/{id}")
    public ResponseEntity<String> delete(@PathVariable Long id) {
        countryService.softDelete(id);
        return ResponseEntity.ok("üóëÔ∏è Qu·ªëc gia ƒë√£ ƒë∆∞·ª£c xo√° m·ªÅm th√†nh c√¥ng.");
    }
}
