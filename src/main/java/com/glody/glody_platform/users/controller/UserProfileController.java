package com.glody.glody_platform.users.controller;

import com.glody.glody_platform.users.dto.UserProfileDto;
import com.glody.glody_platform.users.entity.User;
import com.glody.glody_platform.users.repository.UserRepository;
import com.glody.glody_platform.users.service.UserProfileService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/user-profiles")
@RequiredArgsConstructor
@Tag(name = "User Profile Controller", description = "Qu·∫£n l√Ω h·ªì s∆° ng∆∞·ªùi d√πng")
public class UserProfileController {

    private final UserProfileService userProfileService;
    private final UserRepository userRepository;

    private Long getUserIdFromAuth(Authentication authentication) {
        String email = authentication.getName();
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));
        return user.getId();
    }

    @Operation(summary = "L·∫•y h·ªì s∆° c·ªßa ch√≠nh m√¨nh")
    @GetMapping("/me")
    public ResponseEntity<UserProfileDto> getMyProfile(Authentication authentication) {
        Long userId = getUserIdFromAuth(authentication);
        UserProfileDto profile = userProfileService.getProfile(userId);
        return ResponseEntity.ok(profile);
    }

    @Operation(summary = "L∆∞u ho·∫∑c c·∫≠p nh·∫≠t h·ªì s∆° ng∆∞·ªùi d√πng hi·ªán t·∫°i")
    @PutMapping("/me")
    public ResponseEntity<String> saveProfile(
            Authentication authentication,
            @RequestBody UserProfileDto dto) {

        Long userId = getUserIdFromAuth(authentication);
        userProfileService.saveOrUpdate(userId, dto);
        return ResponseEntity.ok("üìÑ H·ªì s∆° ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c l∆∞u/c·∫≠p nh·∫≠t.");
    }
}
