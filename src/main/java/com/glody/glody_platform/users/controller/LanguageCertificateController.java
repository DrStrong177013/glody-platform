package com.glody.glody_platform.users.controller;

import com.glody.glody_platform.users.dto.LanguageCertificateRequest;
import com.glody.glody_platform.users.dto.LanguageCertificateResponse;
import com.glody.glody_platform.users.service.LanguageCertificateService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * REST Controller qu·∫£n l√Ω ch·ª©ng ch·ªâ ng√¥n ng·ªØ c·ªßa ng∆∞·ªùi d√πng.
 */
@RestController
@RequestMapping("/api/language-certificates")
@RequiredArgsConstructor
@Tag(name = "Language Certificate Controller", description = "Qu·∫£n l√Ω ch·ª©ng ch·ªâ ng√¥n ng·ªØ c·ªßa h·ªì s∆° ng∆∞·ªùi d√πng")
public class LanguageCertificateController {

    private final LanguageCertificateService certificateService;

    /**
     * L·∫•y danh s√°ch ch·ª©ng ch·ªâ ng√¥n ng·ªØ theo profile ng∆∞·ªùi d√πng.
     *
     * @param profileId ID h·ªì s∆° ng∆∞·ªùi d√πng
     * @return Danh s√°ch ch·ª©ng ch·ªâ
     */
    @Operation(summary = "L·∫•y danh s√°ch ch·ª©ng ch·ªâ theo profile ID")
    @GetMapping("/user/{profileId}")
    public ResponseEntity<List<LanguageCertificateResponse>> getCertificatesByProfile(@PathVariable Long profileId) {
        List<LanguageCertificateResponse> certificates = certificateService.getCertificates(profileId);
        return ResponseEntity.ok(certificates);
    }

    /**
     * Th√™m ch·ª©ng ch·ªâ m·ªõi cho h·ªì s∆° ng∆∞·ªùi d√πng.
     *
     * @param profileId ID h·ªì s∆°
     * @param request   D·ªØ li·ªáu ch·ª©ng ch·ªâ
     * @return Th√¥ng b√°o th√†nh c√¥ng
     */
    @Operation(summary = "Th√™m ch·ª©ng ch·ªâ ng√¥n ng·ªØ v√†o h·ªì s∆° ng∆∞·ªùi d√πng")
    @PostMapping("/user/{profileId}")
    public ResponseEntity<String> addCertificate(
            @PathVariable Long profileId,
            @Valid @RequestBody LanguageCertificateRequest request) {

        certificateService.addCertificate(profileId, request);
        return ResponseEntity.ok("üìÑ Ch·ª©ng ch·ªâ ƒë√£ ƒë∆∞·ª£c th√™m.");
    }

    /**
     * Xo√° m·ªôt ch·ª©ng ch·ªâ ng√¥n ng·ªØ theo ID.
     *
     * @param certificateId ID ch·ª©ng ch·ªâ
     * @return Th√¥ng b√°o xo√° th√†nh c√¥ng
     */
    @Operation(summary = "Xo√° ch·ª©ng ch·ªâ ng√¥n ng·ªØ theo ID")
    @DeleteMapping("/{certificateId}")
    public ResponseEntity<String> deleteCertificate(@PathVariable Long certificateId) {
        certificateService.deleteCertificate(certificateId);
        return ResponseEntity.ok("üóëÔ∏è Ch·ª©ng ch·ªâ ƒë√£ b·ªã xo√°.");
    }
    /**
     * C·∫≠p nh·∫≠t th√¥ng tin ch·ª©ng ch·ªâ ng√¥n ng·ªØ.
     *
     * @param certificateId ID ch·ª©ng ch·ªâ
     * @param request       D·ªØ li·ªáu c·∫≠p nh·∫≠t
     * @return Th√¥ng b√°o c·∫≠p nh·∫≠t th√†nh c√¥ng
     */
    @Operation(summary = "C·∫≠p nh·∫≠t th√¥ng tin ch·ª©ng ch·ªâ ng√¥n ng·ªØ")
    @PutMapping("/{certificateId}")
    public ResponseEntity<String> updateCertificate(
            @PathVariable Long certificateId,
            @Valid @RequestBody LanguageCertificateRequest request) {

        certificateService.updateCertificate(certificateId, request);
        return ResponseEntity.ok("‚úèÔ∏è Ch·ª©ng ch·ªâ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.");
    }

}
